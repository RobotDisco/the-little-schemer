* The Law of Tick Marks
A tick mark directly followed by one or more letters and hyphens is an =Atom=

* The Commandment of Tick Marks
Two expressions are the same =Atom= if their values are tick marks followed by identical letters and hyphens

* The Law of =Atom=
=Atom= is a type.

* The Four Forms of Judgement
1. (expression) is a (type).
2. (expression1) is the same (type) as (expression1).
3. (type) is a type.
4. (expression1) and (expression2) are the same type.

* Normal Forms
Given a type, every expression described by that type has a /normal form/, which is the most direct way of writing it.
If two expressions are the same, then they have identical normal forms, if and they have identical normal forms, then they are the same.

* Normal Forms and Types
Sameness is always according to a type, so normal forms are also determined by a type.

* The first Commandment of =cons=
Two =cons=-expressions are the same =(Pair A D)= if their =cars= are the same A and their =cdrs= are the same D. Here =A= and =D= stand for any type.

* Normal Forms of Types
Every expression that is a type has a normal form, which is the most direct way of writing that type. If two expressions are the same type, then they have identical normal forms, and if two types have identical normal forms, then they are the same type.

* Claims before Definitions
Using =define= to associate a name with an expression requires that the expression's type has previously been associated with the name using =claim=.

* Values
An expression with a constructor at the top is called a =value.=

* Values and Normal Forms
Not every value is in normal form. This is because the arguments to a constructor need not be normal. Each expression has only one normal form, but it is sometimes possible to write it as a value in more than one way.

* Evaluation
Finding a value that is the same as some starting expression is called =evaluation=.

* Everything is an Expression
In Pie, values are also expressions. Evaluation in Pie finds an expression, not some other kind of thing.

* A normal expression has no remaining opportunities for evaluation.

* The Commandment of =zero=
=zero= is the same =Nat= as =zero=.

* The Commandment of =add1=
If =n= is the same =Nat= as =k=, then =(add1 n)= is the same =Nat= as =(add1 k)=.

* Definitions are Forever
Once a name has been claimed, it cannot be reclaimed, and once a name has been defined, it cannot be redefined.
